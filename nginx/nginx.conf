user nginx;
pid /var/run/nginx.pid;

# 定义了nginx对外提供web服务时的worker进程数。
# 最优值取决于许多因素，包括（但不限于）CPU核的数量、存储数据的硬盘数量及负载模式。
# 不能确定的时候，将其设置为可用的CPU内核数将是一个好的开始（设置为“auto”将尝试自动检测它）。
worker_processes auto;

# 更改worker进程的最大打开文件数限制。如果没设置的话，这个值为操作系统的限制。
# 设置后你的操作系统和Nginx可以处理比“ulimit -a”更多的文件，所以把这个值设高，
# 这样nginx就不会有“too many open files”问题了。
worker_rlimit_nofile 100000;

# 错误日志存放位置
error_log /var/log/nginx/error.log;

events {
    # 设置可由一个worker进程同时打开的最大连接数。
    # 如果设置了上面提到的worker_rlimit_nofile，我们可以将这个值设得很高。
    # 最大客户数也由系统的可用socket连接数限制（~ 64K），所以设置不切实际的高没什么好处。
    worker_connections 2048;

    # 收到一个新连接通知后接受尽可能多的连接。
    multi_accept on;

    # 设置用于复用客户端线程的轮询方法。如果你使用Linux 2.6+，你应该使用epoll。
    # 如果你使用*BSD，你应该使用kqueue。
    use epoll;
}

http {
    # 关闭在错误页面中的nginx版本数字
    server_tokens off;

    # 可以让sendfile()发挥作用。
    # sendfile()可以在磁盘和TCP socket之间互相拷贝数据(或任意两个文件描述符)。
    # Pre-sendfile是传送数据之前在用户空间申请数据缓冲区。
    # 之后用read()将数据从文件拷贝到这个缓冲区，write()将缓冲区数据写入网络。
    # sendfile()是立即将数据从磁盘读到OS缓存。
    # 因为这种拷贝是在内核完成的，sendfile()要比组合read()和write()以及打开关闭丢弃缓冲更加有效。
    sendfile on;

    # 在一个数据包里发送所有头文件，而不一个接一个的发送。
    tcp_nopush on;

    # 不要缓存数据，而是一段一段的发送。
    # 当需要及时发送数据时，就应该给应用设置这个属性，这样发送一小块数据信息时就不能立即得到返回值。
    tcp_nodelay on;

    # 访问日志的存储格式。
    log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                    '$status $body_bytes_sent "$http_referer" '
                    '"$http_user_agent" "$http_x_forwarded_for"';

    # 设置 nginx 是否存储访问日志。
    # access_log off;
    access_log /var/log/nginx/access.log main;

    # 只记录严重的错误。
    # error_log /var/log/nginx/error.log crit; 

    # 给客户端分配keep-alive链接超时时间，服务器将在这个超时时间过后关闭链接。
    # 设置低些可以让ngnix持续工作的时间更长。
    keepalive_timeout 30;

    # 设置请求头和请求体(各自)的超时时间。
    client_header_timeout 30;
    client_body_timeout 30;

    # 关闭不响应的客户端连接。这将会释放那个客户端所占有的内存空间。
    reset_timedout_connection on;

    # 指定客户端的响应超时时间。这个设置不会用于整个转发器，而是在两次客户端读取操作之间。
    # 如果在这段时间内，客户端没有读取任何数据，nginx就会关闭连接。
    send_timeout 30;

    # 设置用于保存各种key（比如当前连接数）的共享内存的参数。
    # 5m就是5兆字节，这个值应该被设置的足够大以存储（32K*5）32byte状态或者（16K*5）64byte状态。
    limit_conn_zone $binary_remote_addr zone=addr:5m;

    # 为给定的key设置最大连接数。
    # 这里key是addr，我们设置的值是100，也就是说我们允许每一个IP地址最多同时打开有100个连接。
    limit_conn addr 100;

    # 加载稍后会用到的一系列的MIME类型。
    include mime.types;

    # 设置文件使用的默认的MIME-type。
    # default_type text/html;
    default_type application/octet-stream;

    # 设置头文件中的默认的字符集。
    charset UTF-8;

    # 采用gzip压缩的形式发送数据，这将会减少我们发送的数据量。
    gzip on; 

    # 为指定的客户端禁用gzip功能。
    gzip_disable "msie6";

    # 告诉nginx在压缩资源之前，先查找是否有预先gzip处理过的资源。
    # gzip_static on;

    # 允许或者禁止压缩基于请求和响应的响应流。我们设置为any，意味着将会压缩所有的请求。
    gzip_proxied any;

    # 设置对数据启用压缩的最少字节数。如果一个请求小于1000字节，我们最好不要压缩它，
    # 因为压缩这些小的数据会降低处理此请求的所有进程的速度。
    gzip_min_length 1000;

    # 设置数据的压缩等级。这个等级可以是1-9之间的任意数值，9是最慢但是压缩比最大的。
    # 4是一个比较折中的设置。
    gzip_comp_level 4;

    # 设置需要压缩的数据格式。
    gzip_types text/plain text/css application/json application/x-javascript text/xml application/xml application/xml+rss text/javascript;

    # 打开缓存的同时也指定了缓存最大数目，以及缓存的时间。
    # 我们可以设置一个相对高的最大时间，这样我们可以在它们不活动超过20秒后清除掉。
    open_file_cache max=100000 inactive=20s;

    # 在open_file_cache中指定检测正确信息的间隔时间。
    open_file_cache_valid 30s;

    # 定义了open_file_cache中指令参数不活动时间期间里最小的文件数。
    open_file_cache_min_uses 2;

    # 指定了当搜索一个文件时是否缓存错误信息，也包括再次给配置中添加文件。
    # 我们也包括了服务器模块，这些是在不同文件中定义的。
    # 如果你的服务器模块不在这些位置，你就得修改这一行来指定正确的位置。
    open_file_cache_errors on;

    # 引入各个项目的 server 配置
    include ./conf.d/*.conf;
}
